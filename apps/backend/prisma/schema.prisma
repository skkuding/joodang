generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Festival {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  location    String   @default("디도 앞 잔디밭")
  latitude    Float    @default(37.2931959)
  longitude   Float    @default(126.9745929)

  Store Store[]

  @@map("festival")
}

model Store {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  college        String   @default("성균관대학교") // 추후 대학교 입력 필드 생길 예정
  organizer      String?
  imageUrl       String   @default("https://joodang.com/store_image.png") @map("image_url")
  icon           Int      @default(1)
  totalCapacity  Int      @default(50) @map("total_capacity")
  contactInfo    String?  @map("contact_info")
  startTime      DateTime @map("start_time")
  endTime        DateTime @map("end_time")
  isAvailable    Boolean  @default(true) @map("is_available")
  reservationFee Int      @map("reservation_fee")

  bankCode      String @map("bank_code")
  accountNumber String @map("account_number")
  accountHolder String @map("account_holder")

  location  String @default("디도 앞 잔디밭")
  latitude  Float  @default(37.2931959)
  longitude Float  @default(126.9745929)

  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    Int      @map("owner_id")
  festival   Festival @relation(fields: [festivalId], references: [id], onDelete: Cascade)
  festivalId Int      @default(1) @map("festival_id")

  menus           Menu[]
  timeSlots       TimeSlot[]
  Reservation     Reservation[]
  staffs          StoreStaff[]
  staffInvitation StaffInvitation[]
  Notification    Notification[]

  @@map("store")
}

enum MenuCategory {
  Tang     @map("tang") // 탕/전골
  Tuiguim  @map("tuiguim") // 튀김
  Bap      @map("bap") // 밥/식사
  Fruit    @map("fruit") // 과일
  Maroon5  @map("maroon5") // 마른 안주
  Beverage @map("beverage") // 음료

  @@map("menu_category")
}

model Menu {
  id       Int          @id @default(autoincrement())
  name     String
  imageUrl String?      @map("image_url")
  price    Int
  category MenuCategory

  storeId Int   @map("store_id")
  store   Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  reservations Reservation[]

  @@index([storeId])
  @@map("menu")
}

model User {
  id              Int     @id @default(autoincrement())
  kakaoId         String  @unique @map("kakao_id")
  name            String
  phone           String?
  studentId       String? @unique @map("student_id")
  college         String?
  major           String?
  profileImageUrl String? @map("profile_image_url")
  role            Role    @default(USER)

  reservations        Reservation[]
  notificationRecords NotificationRecord[]
  pushSubscriptions   PushSubscription[]

  storeStaffs      StoreStaff[]
  stores           Store[]
  OwnerApplication OwnerApplication[]

  @@map("user")
}

enum Role {
  ADMIN
  OWNER
  STAFF
  USER
}

model OwnerApplication {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone       String
  organizer   String
  isConfirmed Boolean  @default(false) @map("is_confirmed")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("owner_application")
}

model StoreStaff {
  id   Int  @id @default(autoincrement())
  role Role @default(STAFF)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  store   Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId Int

  @@unique([userId, storeId])
  @@map("store_staff")
}

model StaffInvitation {
  id        Int      @id @default(autoincrement())
  code      String   @unique // 6자리 초대 코드
  storeId   Int      @map("store_id")
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  expiresAt DateTime @map("expires_at") // 만료 시간 (24시간)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("staff_invitation")
}

model TimeSlot {
  id             Int      @id @default(autoincrement())
  startTime      DateTime @map("start_time")
  endTime        DateTime @map("end_time")
  totalCapacity  Int      @map("total_capacity")
  availableSeats Int      @map("available_seats")

  storeId Int   @map("store_id")
  store   Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  reservations Reservation[]

  @@map("time_slot")
}

model Reservation {
  id             Int @id @default(autoincrement())
  headcount      Int
  reservationNum Int @map("reservation_num")

  userId     Int?     @map("user_id")
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone      String
  storeId    Int      @map("store_id")
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  timeSlotId Int      @map("time_slot_id")
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)

  isConfirmed Boolean? @map("is_confirmed")
  isDone      Boolean  @default(false) @map("is_done")
  menus       Menu[]

  @@unique([userId, timeSlotId])
  @@map("reservation")
}

model Notification {
  id      Int    @id @default(autoincrement())
  title   String
  message String
  storeId Int?
  store   Store? @relation(fields: [storeId], references: [id], onDelete: SetNull)

  url  String?
  type String  @default("Other")

  createTime          DateTime             @default(now()) @map("create_time")
  notificationRecords NotificationRecord[]

  @@map("notification")
}

model NotificationRecord {
  id             Int          @id @default(autoincrement())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId Int          @map("notification_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int          @map("user_id")
  isRead         Boolean      @default(false) @map("is_read")
  createTime     DateTime     @default(now()) @map("create_time")

  @@index([userId, createTime, id])
  @@map("notification_record")
}

model PushSubscription {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @map("user_id")
  endpoint   String
  p256dh     String
  auth       String
  userAgent  String?  @map("user_agent")
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")

  @@unique([userId, endpoint])
  @@map("push_subscription")
}

enum JobStatus {
  scheduled
  processing
  done
  failed
}

model NotificationJob {
  id          Int       @id @default(autoincrement())
  topic       String
  key         String    @unique()
  payload     Json
  dueAt       DateTime  @map("due_at")
  status      JobStatus @default(scheduled)
  attempts    Int       @default(0)
  maxAttempts Int       @default(5) @map("max_attempts")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  @@map("notification_job")
}
